#ifndef CHAOS_QBL
#define CHAOS_QBL
@include "QB/points.qbl"
@include "QB/colors.qbl"

unsigned long pcg(unsigned long x){
    unsigned long count = (x >> 59);
    x ^= x >> (5 + count);
    x *= 12605985483714917081;
    return x ^ (x >> 43);
}

quibble_point_2D halfway(quibble_point_2D pt_1, quibble_point_2D pt_2){
    quibble_point_2D pt;
    pt.x = 0.5*(pt_1.x + pt_2.x);
    pt.y = 0.5*(pt_1.y + pt_2.y);
    return pt;
}

quibble_point_2D rotate(quibble_point_2D pt, float theta){
    return qb_point_2D((pt.x*cos(theta) - pt.y*sin(theta)),
                       (pt.x*sin(theta) + pt.y*cos(theta)));
}

__stanza sierpinski_chaos(int num_iterations, quibble_simple_camera cam,
                          quibble_point_2D a, quibble_color_rgba8888 c_a,
                          quibble_point_2D b, quibble_color_rgba8888 c_b,
                          quibble_point_2D c, quibble_color_rgba8888 c_c){

    unsigned long rng = pcg(_idx^3);

    float y = ((float)rng/ULONG_MAX)*cam.world_size_y+cam.world_position_y;

    rng = pcg(rng);

    float x = ((float)rng/ULONG_MAX)*cam.world_size_x+cam.world_position_x;

    rng = pcg(rng);


    quibble_point_2D _pt = qb_point_2D(x, y);

    _pt = rotate(_pt, 0.3);
    quibble_color_rgba8888 _clr = qb_color_rgba8888(0,0,1,1);

    histogram_output_rgba8888(_pt, qb_color_rgba8888(1-((float)_idx/(qps_width*qps_height)),1,1,1), cam, qps);

    unsigned long chosen_fx;
   
    for (int _i = 0; _i < num_iterations; ++_i){
        rng = pcg(rng);

        chosen_fx = rng%3;

        switch (chosen_fx){
            case 0:
                _pt = halfway(_pt, a);
                _clr = c_a;
                break;
            case 1:
                _pt = halfway(_pt, b);
                _clr = c_b;
                break;
            case 2:
                _pt = halfway(_pt, c);
                _clr = c_c;
                break;
            default:
                break;
        }
        __split_stanza();
    }

}
#endif
