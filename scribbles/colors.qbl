#ifndef QUIBBLE_COLORS_QBL
#define QUIBBLE_COLORS_QBL

typedef struct {
    unsigned char red;
    unsigned char green;
    unsigned char blue;
    unsigned char alpha;
} quibble_color_rgba8888;

typedef struct {
    unsigned char red;
    unsigned char green;
    unsigned char blue;
} quibble_color_rgb888;

typedef struct {
    unsigned char red;
    unsigned char green;
    unsigned char blue;
    unsigned char priority;
} quibble_pcolor_rgb888;

typedef struct {
    unsigned char red;
    unsigned char green;
    unsigned char blue;
    unsigned char alpha;
    unsigned char priority;
} quibble_pcolor_rgba8888;

float qb_as_float(unsigned char value){
    return (float)value/255;
}

unsigned char qb_color_clamp(float value,
                             float min_value,
                             float max_value){
    if (value < min_value){
        return 0;
    }
    else if (value > max_value){
        return 255;
    }
    else{
        return floor(255*((value - min_value)/(max_value - min_value)));
    }
}

quibble_color_rgba8888 qb_color_rgba8888(float red,
                                         float green,
                                         float blue,
                                         float alpha){
    quibble_color_rgba8888 qp;
    qp.red = qb_color_clamp(red, 0, 1);
    qp.green = qb_color_clamp(green, 0, 1);
    qp.blue = qb_color_clamp(blue, 0, 1);
    qp.alpha = qb_color_clamp(alpha, 0, 1);
    return qp;
}

quibble_color_rgb888 qb_color_rgb888(float red, float green, float blue){
    quibble_color_rgb888 qp;
    qp.red = qb_color_clamp(red, 0, 1);
    qp.green = qb_color_clamp(green, 0, 1);
    qp.blue = qb_color_clamp(blue, 0, 1);
    return qp;
}

quibble_pcolor_rgba8888 qb_pcolor_rgba8888(float red,
                                           float green,
                                           float blue,
                                           float alpha,
                                           float priority){
    quibble_pcolor_rgba8888 qp;
    qp.red = qb_color_clamp(red, 0, 1);
    qp.green = qb_color_clamp(green, 0, 1);
    qp.blue = qb_color_clamp(blue, 0, 1);
    qp.alpha = qb_color_clamp(alpha, 0, 1);
    qp.priority = qb_color_clamp(priority, 0, 1);
    return qp;
}

quibble_pcolor_rgb888 qb_pcolor_rgb888(float red,
                                       float green,
                                       float blue,
                                       float priority){
    quibble_pcolor_rgb888 qp;
    qp.red = qb_color_clamp(red, 0, 1);
    qp.green = qb_color_clamp(green, 0, 1);
    qp.blue = qb_color_clamp(blue, 0, 1);
    qp.priority = qb_color_clamp(priority, 0, 1);
    return qp;
}

#endif
