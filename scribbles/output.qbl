#ifndef QUIBBLE_OUTPUT_QBL
#define QUIBBLE_OUTPUT_QBL

@include "QB/colors.qbl"
@include "QB/points.qbl"
@include "QB/simple_camera.qbl"

void histogram_output_rgba8888(quibble_point_2D pt,
                               quibble_color_rgba8888 color,
                               quibble_simple_camera qcam,
                               __global quibble_color_rgba8888 *_qpix_output){
    int bin = qb_find_bin(pt.x, pt.y, qcam);
    if (bin > 0){
        _qpix_output[bin].red = color.red;
        _qpix_output[bin].green = color.green;
        _qpix_output[bin].blue = color.blue;
        _qpix_output[bin].alpha = color.alpha;
    }
}

void histogram_output_rgb888(quibble_point_2D pt,
                             quibble_color_rgb888 color,
                             quibble_simple_camera qcam,
                             __global quibble_color_rgb888 *_qpix_output){
    int bin = qb_find_bin(pt.x, pt.y, qcam);
    if (bin > 0){
        _qpix_output[bin].red = color.red;
        _qpix_output[bin].green = color.green;
        _qpix_output[bin].blue = color.blue;
    }
}

void histogram_output_prgba8888(quibble_point_2D pt,
                                quibble_pcolor_rgba8888 color,
                                quibble_simple_camera qcam,
                               __global quibble_pcolor_rgba8888 *_qpix_output){
    int bin = qb_find_bin(pt.x, pt.y, qcam);
    if (bin > 0 && color.priority > _qpix_output[bin].priority){
        _qpix_output[bin].red = color.red;
        _qpix_output[bin].green = color.green;
        _qpix_output[bin].blue = color.blue;
        _qpix_output[bin].alpha = color.alpha;
        _qpix_output[bin].priority = color.priority;
    }
}

void histogram_output_prgb888(quibble_point_2D pt,
                              quibble_pcolor_rgb888 color,
                              quibble_simple_camera qcam,
                             __global quibble_pcolor_rgb888 *_qpix_output){
    int bin = qb_find_bin(pt.x, pt.y, qcam);
    if (bin > 0 && color.priority > _qpix_output[bin].priority){
        _qpix_output[bin].red = color.red;
        _qpix_output[bin].green = color.green;
        _qpix_output[bin].blue = color.blue;
        _qpix_output[bin].priority = color.priority;
    }
}

void histogram_overwrite_prgba8888(quibble_point_2D pt,
                                   quibble_pcolor_rgba8888 color,
                                   quibble_simple_camera qcam,
                                  __global quibble_pcolor_rgba8888 *_qpix_output){
    int bin = qb_find_bin(pt.x, pt.y, qcam);
    if (bin > 0){
        _qpix_output[bin].red = color.red;
        _qpix_output[bin].green = color.green;
        _qpix_output[bin].blue = color.blue;
        _qpix_output[bin].alpha = color.alpha;
        _qpix_output[bin].priority = color.priority;
    }
}

void histogram_overwrite_prgb888(quibble_point_2D pt,
                                 quibble_pcolor_rgb888 color,
                                 quibble_simple_camera qcam,
                                __global quibble_pcolor_rgb888 *_qpix_output){
    int bin = qb_find_bin(pt.x, pt.y, qcam);
    if (bin > 0){
        _qpix_output[bin].red = color.red;
        _qpix_output[bin].green = color.green;
        _qpix_output[bin].blue = color.blue;
        _qpix_output[bin].priority = color.priority;
    }
}

quibble_point_2D qb_find_point_location(int idx, quibble_simple_camera qcam){
    int width = qb_find_camera_width(qcam);
    int height = qb_find_camera_height(qcam);

    quibble_point_2D pt;
    pt.y = ((floor((float)(idx / width))+0.5)/height)*qcam.world_size_y + qcam.world_position_y;
    pt.x = (((float)(idx % width) + 0.5)/width)*qcam.world_size_x + qcam.world_position_x;

    return pt;
}

#endif
